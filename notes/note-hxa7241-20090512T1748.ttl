# ttl - Turtle - http://www.w3.org/TeamSubmission/turtle/

# Note - HXA7241
# (for a new note, change: thisnote, title, content, contenthash, date.)


@base <http://hxa.name/>

@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xsd: <http://www.w3.org/TR/xmlschema-2/#> .
@prefix rfc: <http://www.ietf.org/rfc/> .
@prefix iana: <http://www.iana.org/assignments/media-types/> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .

@prefix hxa: <rdf/1/rdf-terms#> .
@prefix thisnote: <urn:uuid:43673080-B36E-4651-A2B7-DF161ABEBE6B> .


thisnote:
dc:title  "The Missing Principle Of Programming Languages"@en
; hxa:content """
*Support for data/computation mechanics (mostly known as performance evaluation/analysis)*

The fundamental material of software is bits and their modification. This is determinate. And this makes software essentially engineering. A basic capability of physical, structural engineering is calculating resultant behaviour from forces across whole structures. In software this would be a matter of the time and space needed for transferring data, transforming data, and storing data. How much is the equivalent basic capability visible in software -- understanding the performance of whole systems?

Common languages have no representation of time. They allow explicit control of space/storage, although total runtime needs are somewhat contingent. But where is time accounted for? There is no language equivalent. When this essential quantitative aspect seems non-existent in most software development, it is no surprise it seems less like engineering.

Time could be handled in two ways: where time properties are deduced for parts or whole, or where parts or whole must fit time properties. And these do indeed exist, but are marginal, specialist, in industry and academia. For the first way, there is 'stochastic process algebras': the main available tool is rather high-level: it can work from UML, but not from code (and might be limited to smaller inputs). For the second way, there are 'synchronous languages', such as: Lustre: in these, program modules react to, and fit into, a stream of event points.

Since compute power is plentiful, most everyday software is casual about performance. But for something so intrinsic to software engineering, at least some significant handling of data/computation mechanics would be reasonable in all languages.

References:
* 'Process Algebras for Quantitative Analysis'; Hillston; University Of Edinburgh; 2005. -- http://www.dcs.ed.ac.uk/pepa/
* 'A Tutorial Of Lustre'; Halbwachs, Raymond; 2002. -- http://www-verimag.imag.fr/SYNCHRONE/index.php?page=lang-design -- http://www-verimag.imag.fr/~halbwach/PS/tutorial.ps
"""@en
; hxa:contenthash  "40a5ae63407aaf5c6075ed49cee667564f003982"^^rfc:rfc3174
; hxa:domainurl  <notes/>
; rdf:type  hxa:note
; dc:format  "text"^^iana:text
; dc:date  "2009-05-12T17:48"^^xsd:dateTime
; dc:creator  <about/foaf.rdf>
; dc:language  "en-GB"^^rfc:rfc4646
; dc:rights  <http://creativecommons.org/licenses/by-sa/3.0/>
.
